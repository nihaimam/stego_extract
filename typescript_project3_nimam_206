Script started on Sat 02 Dec 2017 11:52:21 PM EST
[?1034hbash-4.1$ uname -a
Linux Zeus-2 2.6.32-696.10.2.el6.centos.plus.x86_64 #1 SMP Tue Sep 12 23:39:53 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
bash-4.1$ date
Sat Dec  2 23:52:27 EST 2017
bash-4.1$ pwd
/home/nimam/CS262/project3_nimam_206
bash-4.1$ ls
half.pgm  image.c  image.h  Makefile  Stego.c  StegoExtract.c  typescript_project3_nimam_206
bash-4.1$ cat Stegoc[K.c
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
 * Stego.c: A program for manipulating images                           *
 *++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

#include <string.h>
#include "image.h"

unsigned char getlsbs(unsigned char *p);
void setlsbs(unsigned char *p, unsigned char b0);

int main(int argc, char *argv[])
{  

  int i, j, cover_bits, bits;
  struct Buffer b = {NULL, 0, 0};
  struct Image img = {0, NULL, NULL, NULL, NULL, 0, 0};
  //byte b0 = b.size;

  if (argc != 4) 
  {
    printf("\n%s <cover_file> <stego_file> <file_to_hide> \n", argv[0]);
    exit(1);
  }
  
  ReadImage(argv[1],&img);       // read image file into the image buffer img
                                 // the image is an array of unsigned chars (bytes) of NofR rows
                                 // NofC columns, it should be accessed using provided macros
  ReadBinaryFile(argv[3],&b);    // Read binary data
 

  // hidden information

  // first four bytes is the size of the hidden file
  // next 4 bytes is the G number (4 bits per digit)
  if (!GetColor)
  {
    cover_bits = img.NofC*img.NofR;
  }
  else
  { 
    cover_bits = 3*img.NofC*img.NofR;    
  }
  bits = (8 + b.size)*8;
  if (bits > cover_bits)
  {
    printf("Cover file is not large enough %d (bits) > %d (cover_bits)\n",bits,cover_bits);
    exit(1);
  }

  byte b0 = b.size;

  int getctr = 0; // counter to keep track of get gray function call
  int setctr = 0; // counter to keep track of set gray function call
  
  // embed four size bytes for the Buffer's size field
  for (int i = 0; i < 4; i++)
  {
    unsigned char arr[8]; // create an array of eight unsigned chars
    for (j = 0; j < 8 ; j++)
    {
      arr[j] = GetGray(getctr); // get and save byte from the source image as an unsigned char in array
      getctr++; // increment the get gray counter by one
    }
    setlsbs(arr,b0); // replace the lsbs of each byte of array by the bits of b0
    for(j = 0; j < 8; j++)
    {
      SetGray(setctr, arr[j]); // set byte in the destination image with the unsigned char from array
      setctr++; // increment the set gray counter by one
    }
    b0 = b0 >> 8; // shift b0 to the right by 8
  }

  // embed the eight digits of your G# using 4 bits per digit
  int g[8] = {0,1,0,1,7,0,9,2}; // array of my g number
  int num = 0; 
  for (int i = 0; i < 4; i++)
  {
    unsigned char arr[8]; // create an array of eight unsigned chars
    for (j = 0; j < 8 ; j++)
    {       
      arr[j] = GetGray(getctr); // get and save byte from the source image as an unsigned char in array
      getctr++; // increment the get gray counter by one
    }
    int newnum  = g[num] << 4; //
    num++; // increment num by one
    int newbits = newnum| g[num]; //
    num++; // increment num by one
    setlsbs(arr,newbits); // replace the lsbs of each byte of array by the bits of newbits
    for(j = 0; j < 8; j++)
    {
      SetGray(setctr, arr[j]); // set byte in the destination image with the unsigned char from array
      setctr++; // increment the set gray counter by one
    }
    b0 = b0 >> 8; // shift b0 to the right by 8	
  }

  // embed information into the image one byte at the time
  // change only the least significant bits of the image  
  for (i = 0; i < b.size; i++)
  {
    unsigned char arr[8]; // create an array of eight unsigned chars
    for (j = 0; j < 8; j++)
    {
      arr[j] = GetGray(getctr); // get and save byte from the source image as an unsigned char in array
      getctr++; // increment the get gray counter by one
    }
    setlsbs(arr,(GetByte(i))); // replace the lsbs of each byte of array by getting the byte of i
    for (j = 0; j < 8; j++)
    {
      SetGray(setctr, arr[j]); // set byte in the destination image with the unsigned char from array
      setctr++; // increment the set gray counter by one
    }
  }

  WriteImage(argv[2],img);  // output stego file (cover_file + file_to_hide)

}
bash-4.1$ cat Stego.cE.cx.ct.cr.ca.cc.ct.c
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
 * StegoExtract.c: A program for manipulating images                    *
 *++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

#include <string.h>
#include "image.h"

unsigned char getlsbs(unsigned char *p);

int main(int argc, char *argv[])
{  
  int i, j, cover_bits, bits;
  struct Buffer b = {NULL, 0, 0};
  struct Image img = {0, NULL, NULL, NULL, NULL, 0, 0};
  //byte size = 0;
   
  if (argc != 3) 
    {
      printf("\n%s <stego_file> <file_to_extract> \n", argv[0]);
      exit(1);
    }
  ReadImage(argv[1],&img);       // read image file into the image buffer img
                                 // the image is an array of unsigned chars (bytes) of NofR rows
                                 // NofC columns, it should be accessed using provided macros

  // hidden information 
  // first four bytes is the size of the hidden file
  // next 4 bytes is the G number (4 bits per digit)
  if (!GetColor)
    cover_bits = img.NofC*img.NofR;
  else 
    cover_bits = 3*img.NofC*img.NofR;

  byte size = 0;  
  
  // extract four size bytes for the Buffer's size field
  int getctr = 0; // counter to keep track of get gray function call

  for (i = 0; i < 4; i++)
  {
    unsigned char arr[8]; // create an array of eight unsigned chars
    for (j = 0; j < 8; j++)
    {
      arr[j]= GetGray(getctr); // get and save byte from the source image as an unsigned char in array
      getctr++; // increment the get gray counter by one	
    }			
    size = getlsbs(arr) + size; // increment size by the return of getlsbs of array
  }

  // extract the eight digits of your G# using 4 bits per digit
  int gnum = 0; //initial g number
  printf("G number is "); // print g number
  for (i = 0; i < 4; i++)
  {
    unsigned char arr[8]; // create an array of eight unsigned chars
    for (j = 0; j < 8; j++)
    {
      arr[j] = GetGray(getctr); // get and save byte from the source image as an unsigned char in array
      getctr++; // increment the get gray counter by one
    }
    gnum = getlsbs(arr);
    int first = gnum >> 4; // shift g number right by four
    int second = gnum ^ (first << 4); // raise g number to the power of first
    printf("%d%d", first, second); // print g number
  }
  printf("\n");
	
  // here you extract information from the image and write to the output file
  FILE *infile;
  infile = fopen(argv[2], "wb"); // open infile 
  if (infile == NULL) // check if infile is null or not
  {
    printf("error opening the file\n");
    exit(0);
  }
  char c[size]; // create an array of chars with length size
  for (i = 0; i < size; i++)
  {
    unsigned char arr[8]; // create an array of eight unsigned chars
    for (j = 0; j < 8; j++)
    {
      arr[j] = GetGray(getctr); // get and save byte from the source image as an unsigned char in array
      getctr++;	// increment the get gray counter by one
    }
    c[i] = getlsbs(arr); // store the extracted data in the char arrya	
  }

  fwrite(c, sizeof(size), (sizeof(c)/sizeof(c[0])), infile); // write to the output payload file
  
  fclose(infile); // close the file
  return 0;
}
bash-4.1$ vi in.txt
[?1049h[?1h=[1;24r[?12;25h[?12l[?25h[27m[m[H[2J[?25l[24;1H"in.txt" [New File][2;1H[94m~                                                                                                                         [3;1H~                                                                                                                         [4;1H~                                                                                                                         [5;1H~                                                                                                                         [6;1H~                                                                                                                         [7;1H~                                                                                                                         [8;1H~                                                                                                                         [9;1H~                                                                                                                         [10;1H~                                                                                                                         [11;1H~                                                                                                                         [12;1H~                                                                                                                         [13;1H~                                                                                                                         [14;1H~                                                                                                                         [15;1H~                                                                                                                         [16;1H~                                                                                                                         [17;1H~                                                                                                                         [18;1H~                                                                                                                         [19;1H~                                                                                                                         [20;1H~                                                                                                                         [21;1H~                                                                                                                         [22;1H~                                                                                                                         [23;1H~                                                                                                                         [1;1H[?12l[?25h[?25l[m[24;1H[1m-- INSERT --[m[24;13H[K[2;1H[K[2;1H[?12l[?25h[?25l[94m~                                                                                                                         [1;1H[?12l[?25h[?25l[mi[?12l[?25h[?25l[1;1H[K[1;1H[?12l[?25h[?25lh[?12l[?25h[?25le[?12l[?25h[?25ll[?12l[?25h[?25ll[?12l[?25h[?25lo[?12l[?25h[?25l![?12l[?25h[24;1H[K[1;6H[?25l[?12l[?25h[?25l[24;1H:[?12l[?25hwq[?25l"in.txt" [New] 1L, 7C written
[?1l>[?12l[?25h[?1049lbash-4.1$ cat in
cat: in: No such file or directory
bash-4.1$ cat in*[K.txt
hello!
bash-4.1$ make
gcc image.c -c
gcc Stego.c -c
gcc StegoExtract.c -c
gcc Stego.o image.o -o Stego
gcc StegoExtract.o image.o -o StegoExtract
bash-4.1$ ls
half.pgm  image.h  in.txt    Stego    StegoExtract    StegoExtract.o  typescript_project3_nimam_206
image.c   image.o  Makefile  Stego.c  StegoExtract.c  Stego.o
bash-4.1$ Stego n[Khaf[Klf.pgm new.pgm in.txt

Reading input file 'half.pgm'

Reading binary file 'in.txt'

Writing file 'new.pgm'
bash-4.1$ Stego half.pgm new.pgm in.txt[C[C[C[C[C[C[C[C[C[Cls[Kmakecat in.txt[Kvi in.txtcat StegoExtract.c.c[Kls[Kpwddateuname -als[Kdate[1Ppwduname -avi StegoEx*[5Pls -l [Kcat new.pgm[3Pout*StegoExtract new.pgm out.txt[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C half.pgm new.pgm in.txt[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1PExtract new.pgm out.txt

Reading input file 'new.pgm'
G number is 01017092
bash-4.1$ cat out.txt
hello!
bash-4.1$ ls
half.pgm  image.h  in.txt    new.pgm  Stego    StegoExtract    StegoExtract.o  typescript_project3_nimam_206
image.c   image.o  Makefile  out.txt  Stego.c  StegoExtract.c  Stego.o
bash-4.1$ make clean
rm -f Stego.o
rm -f Stego
rm -f StegoExtract
rm -f StegoExtract.o
rm -f image.o
rm -f new.pgm
rm -f out.txt
bash-4.1$ ls
half.pgm  image.c  image.h  in.txt  Makefile  Stego.c  StegoExtract.c  typescript_project3_nimam_206
bash-4.1$ ls[K[Krm half.pgn[Km
bash-4.1$ rm [K in.txt
bash-4.1$ ls
image.c  image.h  Makefile  Stego.c  StegoExtract.c  typescript_project3_nimam_206
bash-4.1$ cat N[KMakefiel[K[Kle
FLAGS=-Wall -g
project:
	gcc image.c -c
	gcc Stego.c -c
	gcc StegoExtract.c -c
	gcc Stego.o image.o -o Stego
	gcc StegoExtract.o image.o -o StegoExtract
clean:
	rm -f Stego.o
	rm -f Stego
	rm -f StegoExtract
	rm -f StegoExtract.o
	rm -f image.o
	rm -f new.pgm
	rm -f out.txt
bash-4.1$ ls
image.c  image.h  Makefile  Stego.c  StegoExtract.c  typescript_project3_nimam_206
bash-4.1$ pwd
/home/nimam/CS262/project3_nimam_206
bash-4.1$ date
Sat Dec  2 23:54:17 EST 2017
bash-4.1$ exit

Script done on Sat 02 Dec 2017 11:54:20 PM EST
